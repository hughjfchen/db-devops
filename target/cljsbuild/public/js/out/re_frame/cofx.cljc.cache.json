["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$console","~$re-frame.loggers"],"~:excludes",["~#set",[]],"~:name","~$re-frame.cofx","~:imports",null,"~:requires",["^ ","~$re-frame.db","^=","~$re-frame.interceptor","^>","~$re-frame.registrar","^?","^6","^6"],"~:uses",["^ ","^5","^6","~$app-db","^=","~$->interceptor","^>","~$get-handler","^?","~$clear-handlers","^?","~$register-handler","^?"],"~:defs",["^ ","~$kind",["^ ","^9","~$re-frame.cofx/kind","~:file","target/cljsbuild/public/js/out/re_frame/cofx.cljc","~:line",11,"~:column",1,"~:end-line",11,"~:end-column",10,"~:meta",["^ ","^I","/Users/chenjinfen/Desktop/projects/CMB/IMAVP/2017/db-devops/05-dev/db-devops/target/cljsbuild/public/js/out/re_frame/cofx.cljc","^J",11,"^K",6,"^L",11,"^M",10],"~:tag","~$cljs.core/Keyword"],"~$register",["^ ","^9","~$re-frame.cofx/register","^I","target/cljsbuild/public/js/out/re_frame/cofx.cljc","^J",13,"^K",1,"^L",13,"^M",14,"^N",["^ ","^I","/Users/chenjinfen/Desktop/projects/CMB/IMAVP/2017/db-devops/05-dev/db-devops/target/cljsbuild/public/js/out/re_frame/cofx.cljc","^J",13,"^K",6,"^L",13,"^M",14],"^O","~$any"],"~$inject-cofx",["^ ","~:protocol-inline",null,"^N",["^ ","^I","/Users/chenjinfen/Desktop/projects/CMB/IMAVP/2017/db-devops/05-dev/db-devops/target/cljsbuild/public/js/out/re_frame/cofx.cljc","^J",18,"^K",7,"^L",18,"^M",18,"~:arglists",["~#list",["~$quote",["^W",[["~$id"],["^Y","~$value"]]]]],"~:doc","Returns an interceptor which adds to a `context's` `:coeffects`.\n\n  `coeffects` are the input resources required by an event handler\n   to perform its job. The two most obvious ones are `db` and `event`.\n   But sometimes a handler might need other resources.\n\n   Perhaps a handler needs a random number or a GUID or the current datetime.\n   Perhaps it needs access to the connection to a DataScript database.\n\n   If the handler directly access these resources, it stops being as\n   pure. It immedaitely becomes harder to test, etc.\n\n   So the necessary resources are \"injected\" into the `coeffect` (map)\n   given the handler.\n\n   Given an `id`, and an optional value, lookup the registered coeffect\n   handler (previously registered via `reg-cofx`) and it with two arguments:\n   the current value of `:coeffects` and, optionally, the value. The registered handler\n   is expected to return a modified coeffect.\n   ","~:top-fn",["^ ","~:variadic",false,"~:max-fixed-arity",2,"~:method-params",["^W",[["^Y"],["^Y","^Z"]]],"^V",["^W",[["^Y"],["^Y","^Z"]]],"~:arglists-meta",["^W",[null,null]]]],"^9","~$re-frame.cofx/inject-cofx","^11",false,"^I","target/cljsbuild/public/js/out/re_frame/cofx.cljc","^M",18,"^10",["^ ","^11",false,"^12",2,"^13",["^W",[["^Y"],["^Y","^Z"]]],"^V",["^W",[["^Y"],["^Y","^Z"]]],"^14",["^W",[null,null]]],"^13",["^W",[["^Y"],["^Y","^Z"]]],"~:protocol-impl",null,"^14",["^W",[null,null]],"^K",1,"^J",18,"^L",18,"^12",2,"~:fn-var",true,"^V",["^W",[["^Y"],["^Y","^Z"]]],"^[","Returns an interceptor which adds to a `context's` `:coeffects`.\n\n  `coeffects` are the input resources required by an event handler\n   to perform its job. The two most obvious ones are `db` and `event`.\n   But sometimes a handler might need other resources.\n\n   Perhaps a handler needs a random number or a GUID or the current datetime.\n   Perhaps it needs access to the connection to a DataScript database.\n\n   If the handler directly access these resources, it stops being as\n   pure. It immedaitely becomes harder to test, etc.\n\n   So the necessary resources are \"injected\" into the `coeffect` (map)\n   given the handler.\n\n   Given an `id`, and an optional value, lookup the registered coeffect\n   handler (previously registered via `reg-cofx`) and it with two arguments:\n   the current value of `:coeffects` and, optionally, the value. The registered handler\n   is expected to return a modified coeffect.\n   "],"~$inject-db",["^ ","^9","~$re-frame.cofx/inject-db","^I","target/cljsbuild/public/js/out/re_frame/cofx.cljc","^J",66,"^K",1,"^L",66,"^M",15,"^N",["^ ","^I","/Users/chenjinfen/Desktop/projects/CMB/IMAVP/2017/db-devops/05-dev/db-devops/target/cljsbuild/public/js/out/re_frame/cofx.cljc","^J",66,"^K",6,"^L",66,"^M",15],"^O","^S"]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:db","~:id","~:coeffects","~:cofx","~:before"]],"~:order",["^1@","^1>","^1?","^1A","^1="]],"^[",null]